/**
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.contract.impl;

import java.util.Collection;

import lsi.us.es.mis.xtext.contract.ContractPackage;
import lsi.us.es.mis.xtext.contract.Event;
import lsi.us.es.mis.xtext.contract.Method;
import lsi.us.es.mis.xtext.contract.Param;
import lsi.us.es.mis.xtext.contract.Validator;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getName <em>Name</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getParams <em>Params</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getStatemutability <em>Statemutability</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getOutputs <em>Outputs</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getValidators <em>Validators</em>}</li>
 *   <li>{@link lsi.us.es.mis.xtext.contract.impl.MethodImpl#getEvents <em>Events</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends MinimalEObjectImpl.Container implements Method
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<Param> params;

  /**
   * The default value of the '{@link #getStatemutability() <em>Statemutability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatemutability()
   * @generated
   * @ordered
   */
  protected static final String STATEMUTABILITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatemutability() <em>Statemutability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatemutability()
   * @generated
   * @ordered
   */
  protected String statemutability = STATEMUTABILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutputs() <em>Outputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputs()
   * @generated
   * @ordered
   */
  protected EList<Param> outputs;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getValidators() <em>Validators</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidators()
   * @generated
   * @ordered
   */
  protected EList<Validator> validators;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ContractPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ContractPackage.METHOD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Param> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<Param>(Param.class, this, ContractPackage.METHOD__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStatemutability()
  {
    return statemutability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatemutability(String newStatemutability)
  {
    String oldStatemutability = statemutability;
    statemutability = newStatemutability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ContractPackage.METHOD__STATEMUTABILITY, oldStatemutability, statemutability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Param> getOutputs()
  {
    if (outputs == null)
    {
      outputs = new EObjectContainmentEList<Param>(Param.class, this, ContractPackage.METHOD__OUTPUTS);
    }
    return outputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ContractPackage.METHOD__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Validator> getValidators()
  {
    if (validators == null)
    {
      validators = new EObjectResolvingEList<Validator>(Validator.class, this, ContractPackage.METHOD__VALIDATORS);
    }
    return validators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectResolvingEList<Event>(Event.class, this, ContractPackage.METHOD__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ContractPackage.METHOD__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case ContractPackage.METHOD__OUTPUTS:
        return ((InternalEList<?>)getOutputs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ContractPackage.METHOD__NAME:
        return getName();
      case ContractPackage.METHOD__PARAMS:
        return getParams();
      case ContractPackage.METHOD__STATEMUTABILITY:
        return getStatemutability();
      case ContractPackage.METHOD__OUTPUTS:
        return getOutputs();
      case ContractPackage.METHOD__DESCRIPTION:
        return getDescription();
      case ContractPackage.METHOD__VALIDATORS:
        return getValidators();
      case ContractPackage.METHOD__EVENTS:
        return getEvents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ContractPackage.METHOD__NAME:
        setName((String)newValue);
        return;
      case ContractPackage.METHOD__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends Param>)newValue);
        return;
      case ContractPackage.METHOD__STATEMUTABILITY:
        setStatemutability((String)newValue);
        return;
      case ContractPackage.METHOD__OUTPUTS:
        getOutputs().clear();
        getOutputs().addAll((Collection<? extends Param>)newValue);
        return;
      case ContractPackage.METHOD__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case ContractPackage.METHOD__VALIDATORS:
        getValidators().clear();
        getValidators().addAll((Collection<? extends Validator>)newValue);
        return;
      case ContractPackage.METHOD__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ContractPackage.METHOD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ContractPackage.METHOD__PARAMS:
        getParams().clear();
        return;
      case ContractPackage.METHOD__STATEMUTABILITY:
        setStatemutability(STATEMUTABILITY_EDEFAULT);
        return;
      case ContractPackage.METHOD__OUTPUTS:
        getOutputs().clear();
        return;
      case ContractPackage.METHOD__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case ContractPackage.METHOD__VALIDATORS:
        getValidators().clear();
        return;
      case ContractPackage.METHOD__EVENTS:
        getEvents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ContractPackage.METHOD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ContractPackage.METHOD__PARAMS:
        return params != null && !params.isEmpty();
      case ContractPackage.METHOD__STATEMUTABILITY:
        return STATEMUTABILITY_EDEFAULT == null ? statemutability != null : !STATEMUTABILITY_EDEFAULT.equals(statemutability);
      case ContractPackage.METHOD__OUTPUTS:
        return outputs != null && !outputs.isEmpty();
      case ContractPackage.METHOD__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case ContractPackage.METHOD__VALIDATORS:
        return validators != null && !validators.isEmpty();
      case ContractPackage.METHOD__EVENTS:
        return events != null && !events.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", statemutability: ");
    result.append(statemutability);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //MethodImpl
