/**
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator;

import com.google.common.base.Objects;
import java.util.List;
import lsi.us.es.mis.xtext.contract.Attribute;
import lsi.us.es.mis.xtext.contract.Contract;
import lsi.us.es.mis.xtext.contract.Event;
import lsi.us.es.mis.xtext.contract.Param;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SolidityGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Contract contract = ((Contract) _head);
    String _name = contract.getName();
    String _plus = (_name + ".sol");
    fsa.generateFile(_plus, this.toSolidity(contract));
  }
  
  public String toSolidity(final Contract contract) {
    StringBuilder code = new StringBuilder();
    final String contractName = contract.getName();
    code.append("// SPDX-License-Identifier: MIT\n");
    code.append("pragma solidity ^0.8.0;\n\n");
    code.append((("contract " + contractName) + " {\n"));
    this.appendAttributes(contract.getAttributes(), code);
    this.appendEvents(contract, code);
    this.appendConstructor(contract.getAttributes(), code);
    this.appendAttributeFunctions(contract.getAttributes(), code);
    code.append("}");
    return code.toString();
  }
  
  public StringBuilder appendAttributes(final List<Attribute> attributes, final StringBuilder code) {
    StringBuilder _xblockexpression = null;
    {
      for (final Attribute attribute : attributes) {
        {
          final String attributeName = attribute.getName();
          final String attributeType = this.getSolidityDataType(attribute.getType().toString());
          code.append((((("\t" + attributeType) + " ") + attributeName) + ";\n"));
        }
      }
      _xblockexpression = code.append("\n");
    }
    return _xblockexpression;
  }
  
  public StringBuilder appendConstructor(final List<Attribute> attributes, final StringBuilder code) {
    StringBuilder _xblockexpression = null;
    {
      code.append("\tconstructor(");
      for (final Attribute attribute : attributes) {
        {
          final String attributeName = attribute.getName();
          final String attributeType = this.getSolidityDataTypeForFunction(attribute.getType().toString());
          code.append(((attributeType + " _") + attributeName));
          Attribute _last = IterableExtensions.<Attribute>last(attributes);
          boolean _notEquals = (!Objects.equal(attribute, _last));
          if (_notEquals) {
            code.append(", ");
          }
        }
      }
      code.append(") {\n");
      for (final Attribute attribute_1 : attributes) {
        {
          final String attributeName = attribute_1.getName();
          code.append((((("\t\t" + attributeName) + " = _") + attributeName) + ";\n"));
        }
      }
      _xblockexpression = code.append("\t}\n\n");
    }
    return _xblockexpression;
  }
  
  public void appendAttributeFunctions(final List<Attribute> attributes, final StringBuilder code) {
    for (final Attribute attribute : attributes) {
      {
        final String attributeName = attribute.getName();
        final String attributeType = this.getSolidityDataTypeForFunction(attribute.getType().toString());
        boolean _isModifiable = attribute.isModifiable();
        if (_isModifiable) {
          String _capitalizeFirstLetter = this.capitalizeFirstLetter(attributeName);
          String _plus = ("\tfunction set" + _capitalizeFirstLetter);
          String _plus_1 = (_plus + "(");
          String _plus_2 = (_plus_1 + attributeType);
          String _plus_3 = (_plus_2 + " _value) public {\n");
          code.append(_plus_3);
          code.append((("\t\t" + attributeName) + " = _value;\n"));
          code.append("\t}\n\n");
        }
        String _capitalizeFirstLetter_1 = this.capitalizeFirstLetter(attributeName);
        String _plus_4 = ("\tfunction get" + _capitalizeFirstLetter_1);
        String _plus_5 = (_plus_4 + "() public view returns (");
        String _plus_6 = (_plus_5 + attributeType);
        String _plus_7 = (_plus_6 + ") {\n");
        code.append(_plus_7);
        code.append((("\t\treturn " + attributeName) + ";\n"));
        code.append("\t}\n\n");
      }
    }
  }
  
  public void appendEvents(final Contract contract, final StringBuilder code) {
    final EList<Event> events = contract.getEvents();
    this.appendPaymentReceivedEvent(contract, code);
    for (final Event event : events) {
      {
        String _capitalizeFirstLetter = this.capitalizeFirstLetter(event.getName());
        String _plus = ("\tevent " + _capitalizeFirstLetter);
        String _plus_1 = (_plus + "(");
        code.append(_plus_1);
        EList<Param> _params = event.getParams();
        for (final Param param : _params) {
          {
            final String parameterName = param.getName();
            final String parameterType = this.getSolidityDataTypeForFunction(param.getType().toString());
            code.append(((parameterType + " ") + parameterName));
            Param _last = IterableExtensions.<Param>last(event.getParams());
            boolean _notEquals = (!Objects.equal(param, _last));
            if (_notEquals) {
              code.append(", ");
            }
          }
        }
        code.append(");\n");
        Event _last = IterableExtensions.<Event>last(events);
        boolean _equals = Objects.equal(event, _last);
        if (_equals) {
          code.append("\n");
        }
      }
    }
  }
  
  public StringBuilder appendReceiveFunction(final StringBuilder code) {
    StringBuilder _xblockexpression = null;
    {
      code.append("\treceive() external payable {\n");
      code.append("\t\temit PaymentReceived(msg.sender, msg.value);\n");
      _xblockexpression = code.append("\t}\n\n");
    }
    return _xblockexpression;
  }
  
  public StringBuilder appendPaymentReceivedEvent(final Contract contract, final StringBuilder code) {
    StringBuilder _xifexpression = null;
    boolean _isHasReceive = contract.isHasReceive();
    if (_isHasReceive) {
      StringBuilder _xblockexpression = null;
      {
        code.append("\tevent PaymentReceived(address sender, uint amount);\n");
        StringBuilder _xifexpression_1 = null;
        int _size = contract.getEvents().size();
        boolean _equals = (_size == 0);
        if (_equals) {
          _xifexpression_1 = code.append("\n");
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    }
    return _xifexpression;
  }
  
  public String getSolidityDataType(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          return "uint256";
        case "string":
          return "string";
        case "boolean":
          return "bool";
        case "address":
          return "address";
        case "array":
          return "uint256[]";
        default:
          return "uint256";
      }
    } else {
      return "uint256";
    }
  }
  
  public String getSolidityDataTypeForFunction(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          return "uint256";
        case "string":
          return "string memory";
        case "boolean":
          return "bool";
        case "address":
          return "address";
        case "array":
          return "uint256[]";
        default:
          return "uint256";
      }
    } else {
      return "uint256";
    }
  }
  
  public String capitalizeFirstLetter(final String str) {
    String _upperCase = str.substring(0, 1).toUpperCase();
    String _substring = str.substring(1);
    return (_upperCase + _substring);
  }
}
