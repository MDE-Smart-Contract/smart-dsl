/**
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator;

import lsi.us.es.mis.xtext.contract.Attribute;
import lsi.us.es.mis.xtext.contract.Contract;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class HyperledgerGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Contract contract = ((Contract) _head);
    String _name = contract.getName();
    String _plus = (_name + ".go");
    fsa.generateFile(_plus, this.toHyperledger(contract));
  }
  
  public String toHyperledger(final Contract contract) {
    final String contractName = contract.getName();
    final StringBuilder code = new StringBuilder();
    code.append("package main\n\n");
    code.append("import (\n");
    code.append("\t\"fmt\"\n");
    code.append("\n");
    code.append("\t\"github.com/hyperledger/fabric-contract-api-go/contractapi\"\n");
    code.append(")\n\n");
    code.append((("type " + contractName) + " struct {\n"));
    code.append("\tcontractapi.Contract\n");
    EList<Attribute> _attributes = contract.getAttributes();
    for (final Attribute attribute : _attributes) {
      {
        final String attributeName = attribute.getName();
        final String attributeType = this.getCorrectType(attribute.getType().toString());
        String _capitalizeFirstLetter = this.capitalizeFirstLetter(attributeName);
        String _plus = ("\t" + _capitalizeFirstLetter);
        String _plus_1 = (_plus + " ");
        String _plus_2 = (_plus_1 + attributeType);
        String _plus_3 = (_plus_2 + "\n");
        code.append(_plus_3);
      }
    }
    code.append("}\n\n");
    EList<Attribute> _attributes_1 = contract.getAttributes();
    for (final Attribute attribute_1 : _attributes_1) {
      {
        final String attributeName = attribute_1.getName();
        final String capitalizeAttributeName = this.capitalizeFirstLetter(attributeName);
        final String attributeType = this.getCorrectType(attribute_1.getType().toString());
        boolean _isModifiable = attribute_1.isModifiable();
        if (_isModifiable) {
          code.append((((((("func (sc *" + contractName) + ") Set") + capitalizeAttributeName) + "(ctx contractapi.TransactionContextInterface, value ") + attributeType) + ") error {\n"));
          String _capitalizeFirstLetter = this.capitalizeFirstLetter(attributeName);
          String _plus = ("\tsc." + _capitalizeFirstLetter);
          String _plus_1 = (_plus + " = value\n");
          code.append(_plus_1);
          code.append("\treturn nil\n");
          code.append("}\n\n");
        }
        code.append((((((("func (sc *" + contractName) + ") Get") + capitalizeAttributeName) + "(ctx contractapi.TransactionContextInterface) (") + attributeType) + ", error) {\n"));
        String _capitalizeFirstLetter_1 = this.capitalizeFirstLetter(attributeName);
        String _plus_2 = ("\treturn sc." + _capitalizeFirstLetter_1);
        String _plus_3 = (_plus_2 + ", nil\n");
        code.append(_plus_3);
        code.append("}\n\n");
      }
    }
    code.append((("func (sc *" + contractName) + ") InitLedger(ctx contractapi.TransactionContextInterface) error {\n"));
    code.append("\t// Inicializa los valores de los atributos\n");
    EList<Attribute> _attributes_2 = contract.getAttributes();
    for (final Attribute attribute_2 : _attributes_2) {
      {
        final String attributeName = attribute_2.getName();
        final String defaultValue = this.getDefaultInitialValue(attribute_2.getType().toString());
        String _capitalizeFirstLetter = this.capitalizeFirstLetter(attributeName);
        String _plus = ("\tsc." + _capitalizeFirstLetter);
        String _plus_1 = (_plus + " = ");
        String _plus_2 = (_plus_1 + defaultValue);
        String _plus_3 = (_plus_2 + "\n");
        code.append(_plus_3);
      }
    }
    code.append("\treturn nil\n");
    code.append("}\n\n");
    code.append("func main() {\n");
    code.append((("\tchaincode, err := contractapi.NewChaincode(&" + contractName) + "{})\n"));
    code.append("\tif err != nil {\n");
    code.append((("\t\tfmt.Printf(\"Error creating " + contractName) + " chaincode: %s\", err.Error())\n"));
    code.append("\t\treturn\n");
    code.append("\t}\n\n");
    code.append("\tif err := chaincode.Start(); err != nil {\n");
    code.append((("\t\tfmt.Printf(\"Error starting " + contractName) + " chaincode: %s\", err.Error())\n"));
    code.append("\t}\n");
    code.append("}\n");
    return code.toString();
  }
  
  public String getDefaultInitialValue(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          return "0";
        case "string":
          return "\"\"";
        case "boolean":
          return "false";
        case "address":
          return "\"\"";
        case "array":
          return "[]uint64{}";
        default:
          return "uint64";
      }
    } else {
      return "uint64";
    }
  }
  
  public String getCorrectType(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          return "uint64";
        case "string":
          return "string";
        case "boolean":
          return "bool";
        case "address":
          return "string";
        case "array":
          return "uint64[]";
        default:
          return "uint64";
      }
    } else {
      return "uint64";
    }
  }
  
  public String capitalizeFirstLetter(final String str) {
    String _upperCase = str.substring(0, 1).toUpperCase();
    String _substring = str.substring(1);
    return (_upperCase + _substring);
  }
}
