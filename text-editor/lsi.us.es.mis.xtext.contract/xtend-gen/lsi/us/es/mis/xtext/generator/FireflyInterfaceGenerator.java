/**
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator;

import com.google.common.base.Objects;
import lsi.us.es.mis.xtext.contract.Attribute;
import lsi.us.es.mis.xtext.contract.Contract;
import lsi.us.es.mis.xtext.contract.Event;
import lsi.us.es.mis.xtext.contract.Method;
import lsi.us.es.mis.xtext.contract.Param;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FireflyInterfaceGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Contract contract = ((Contract) _head);
    String _name = contract.getName();
    String _plus = (_name + ".json");
    fsa.generateFile(_plus, this.toFireflyInterface(contract));
  }
  
  public String toFireflyInterface(final Contract contract) {
    final String name = contract.getName();
    final String version = contract.getVersion();
    String methods = this.defineMethods(contract);
    String events = this.defineEvents(contract);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"name\": \"");
    _builder.append(name, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"version\":  \"");
    _builder.append(version, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append(methods, "    ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(events, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    final String interfaceCode = _builder.toString();
    return interfaceCode;
  }
  
  public String defineEvents(final Contract contract) {
    int count = 0;
    int max = ((Object[])Conversions.unwrapArray(contract.getEvents(), Object.class)).length;
    String events = this.appendPaymentReceivedEvent(contract);
    EList<Event> _events = contract.getEvents();
    for (final Event event : _events) {
      {
        count++;
        String params = "";
        int paramCount = 0;
        int paramMax = ((Object[])Conversions.unwrapArray(event.getParams(), Object.class)).length;
        EList<Param> _params = event.getParams();
        for (final Param param : _params) {
          {
            final String attributeType = param.getType().toString();
            paramCount++;
            String _params_1 = params;
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("{");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("\"name\": \"");
            String _name = param.getName();
            _builder.append(_name, "    ");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            String _paramTypeForSolidity = this.getParamTypeForSolidity(attributeType);
            _builder.append(_paramTypeForSolidity, "    ");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            {
              if ((paramCount < paramMax)) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            params = (_params_1 + _builder);
          }
        }
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("{");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"name\": \"");
        String _capitalizeFirstLetter = this.capitalizeFirstLetter(event.getName());
        _builder.append(_capitalizeFirstLetter, "    ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("\"description\": \"");
        String _description = event.getDescription();
        _builder.append(_description, "    ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("\"params\": [");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append(params, "    \t");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("],");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"details\": {}");
        _builder.newLine();
        _builder.append("}");
        {
          if ((count < max)) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
        final String eventCode = _builder.toString();
        String _events_1 = events;
        events = (_events_1 + eventCode);
      }
    }
    boolean _isEmpty = events.isEmpty();
    if (_isEmpty) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"events\": []");
      events = _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"events\": [");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append(events, "\t");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("]");
      _builder_1.newLine();
      events = _builder_1.toString();
    }
    return events;
  }
  
  public String defineMethods(final Contract contract) {
    int count = 0;
    int _length = ((Object[])Conversions.unwrapArray(contract.getAttributes(), Object.class)).length;
    int _length_1 = ((Object[])Conversions.unwrapArray(contract.getMethods(), Object.class)).length;
    int max = (_length + _length_1);
    String methods = this.appendReceiveMethod(contract);
    EList<Attribute> _attributes = contract.getAttributes();
    for (final Attribute attribute : _attributes) {
      {
        count++;
        final String attributeName = attribute.getName();
        final String attributeType = attribute.getType().toString();
        boolean _isModifiable = attribute.isModifiable();
        if (_isModifiable) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("{");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("\"name\": \"_value\",");
          _builder.newLine();
          _builder.append("    ");
          String _paramTypeForSolidity = this.getParamTypeForSolidity(attributeType);
          _builder.append(_paramTypeForSolidity, "    ");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          final String param = _builder.toString();
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("{");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"name\": \"set");
          String _capitalizeFirstLetter = this.capitalizeFirstLetter(attributeName);
          _builder_1.append(_capitalizeFirstLetter, "    ");
          _builder_1.append("\",");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("    ");
          _builder_1.append("\"description\": \"\",");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"params\": [");
          _builder_1.newLine();
          _builder_1.append("        ");
          _builder_1.append(param, "        ");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("    ");
          _builder_1.append("],");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"returns\": []");
          _builder_1.newLine();
          _builder_1.append("},");
          _builder_1.newLine();
          final String methodCode = _builder_1.toString();
          String _methods = methods;
          methods = (_methods + methodCode);
        }
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("{");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("\"name\": \"get");
        String _capitalizeFirstLetter_1 = this.capitalizeFirstLetter(attributeName);
        _builder_2.append(_capitalizeFirstLetter_1, "    ");
        _builder_2.append("\",");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("    ");
        _builder_2.append("\"description\": \"\",");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("\"params\": [],");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("\"returns\": [");
        _builder_2.newLine();
        _builder_2.append("        ");
        _builder_2.append("{");
        _builder_2.newLine();
        _builder_2.append("        \t");
        String _returnTypeForSolidity = this.getReturnTypeForSolidity(attributeType);
        _builder_2.append(_returnTypeForSolidity, "        \t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("        ");
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("],");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("\"details\": {");
        _builder_2.newLine();
        _builder_2.append("        ");
        _builder_2.append("\"stateMutability\": \"viewable\"");
        _builder_2.newLine();
        _builder_2.append("    ");
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.append("}");
        {
          if ((count < max)) {
            _builder_2.append(",");
          }
        }
        _builder_2.newLineIfNotEmpty();
        final String methodCode_1 = _builder_2.toString();
        String _methods_1 = methods;
        methods = (_methods_1 + methodCode_1);
      }
    }
    EList<Method> _methods = contract.getMethods();
    for (final Method method : _methods) {
      {
        count++;
        String params = "";
        String returns = "";
        EList<Param> _params = method.getParams();
        for (final Param param : _params) {
          {
            final String paramName = param.getName();
            final String paramType = param.getType().toString();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("{");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("\"name\": \"");
            _builder.append(paramName, "    ");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            String _paramTypeForSolidity = this.getParamTypeForSolidity(paramType);
            _builder.append(_paramTypeForSolidity, "    ");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            {
              Param _last = IterableExtensions.<Param>last(method.getParams());
              boolean _notEquals = (!Objects.equal(param, _last));
              if (_notEquals) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            final String element = _builder.toString();
            String _params_1 = params;
            params = (_params_1 + element);
          }
        }
        EList<Param> _outputs = method.getOutputs();
        for (final Param output : _outputs) {
          {
            final String paramName = output.getName();
            final String paramType = output.getType().toString();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("{");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("\"name\": \"");
            _builder.append(paramName, "    ");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            String _paramTypeForSolidity = this.getParamTypeForSolidity(paramType);
            _builder.append(_paramTypeForSolidity, "    ");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            {
              Param _last = IterableExtensions.<Param>last(method.getOutputs());
              boolean _notEquals = (!Objects.equal(output, _last));
              if (_notEquals) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            final String element = _builder.toString();
            String _returns = returns;
            returns = (_returns + element);
          }
        }
        boolean _isEmpty = params.isEmpty();
        if (_isEmpty) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("\"params\": [],");
          params = _builder.toString();
        } else {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("\"params\": [");
          _builder_1.newLine();
          _builder_1.append("\t");
          _builder_1.append(params, "\t");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("],");
          _builder_1.newLine();
          params = _builder_1.toString();
        }
        boolean _isEmpty_1 = returns.isEmpty();
        if (_isEmpty_1) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("\"returns\": [],");
          returns = _builder_2.toString();
        } else {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("\"returns\": [");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append(returns, "\t");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("],");
          _builder_3.newLine();
          returns = _builder_3.toString();
        }
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("{");
        _builder_4.newLine();
        _builder_4.append("    ");
        _builder_4.append("\"name\": \"");
        String _name = method.getName();
        _builder_4.append(_name, "    ");
        _builder_4.append("\",");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("    ");
        _builder_4.append("\"description\": \"");
        String _description = method.getDescription();
        _builder_4.append(_description, "    ");
        _builder_4.append("\",");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("    ");
        _builder_4.append(params, "    ");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("    ");
        _builder_4.append(returns, "    ");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("    ");
        _builder_4.append("\"details\": {}");
        _builder_4.newLine();
        _builder_4.append("}");
        {
          if ((count < max)) {
            _builder_4.append(",");
          }
        }
        _builder_4.newLineIfNotEmpty();
        final String methodCode = _builder_4.toString();
        String _methods_1 = methods;
        methods = (_methods_1 + methodCode);
      }
    }
    boolean _isEmpty = methods.isEmpty();
    if (_isEmpty) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"methods\": []");
      methods = _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"methods\": [");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append(methods, "\t");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("]");
      _builder_1.newLine();
      methods = _builder_1.toString();
    }
    return methods;
  }
  
  public String appendPaymentReceivedEvent(final Contract contract) {
    String data = "";
    boolean _isHasReceive = contract.isHasReceive();
    if (_isHasReceive) {
      String _data = data;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"name\": \"PaymentReceived\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"description\": \"This event is for notify when a payment was received\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"params\": [");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("\"name\": \"sender\",");
      _builder.newLine();
      _builder.append("    \t\t");
      String _paramTypeForSolidity = this.getParamTypeForSolidity("address");
      _builder.append(_paramTypeForSolidity, "    \t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("\"name\": \"amount\",");
      _builder.newLine();
      _builder.append("    \t\t");
      String _paramTypeForSolidity_1 = this.getParamTypeForSolidity("integer");
      _builder.append(_paramTypeForSolidity_1, "    \t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("],");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"details\": {}");
      _builder.newLine();
      _builder.append("}");
      {
        int _length = ((Object[])Conversions.unwrapArray(contract.getEvents(), Object.class)).length;
        boolean _notEquals = (_length != 0);
        if (_notEquals) {
          _builder.append(",");
        }
      }
      _builder.newLineIfNotEmpty();
      data = (_data + _builder);
    }
    return data;
  }
  
  public String appendReceiveMethod(final Contract contract) {
    String data = "";
    boolean _isHasReceive = contract.isHasReceive();
    if (_isHasReceive) {
      String _data = data;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"name\": \"receive\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"description\": \"This function is to receive payments to the smart contract\",");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"params\": [],");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"returns\": [],");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("\"details\": {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("\"stateMutability\": \"payable\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      {
        if (((((Object[])Conversions.unwrapArray(contract.getMethods(), Object.class)).length != 0) || (((Object[])Conversions.unwrapArray(contract.getAttributes(), Object.class)).length != 0))) {
          _builder.append(",");
        }
      }
      _builder.newLineIfNotEmpty();
      data = (_data + _builder);
    }
    return data;
  }
  
  public String getReturnTypeForSolidity(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("\"name\": \"output\",");
          _builder.newLine();
          _builder.append("\"schema\": {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("\"type\": \"integer\",");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("\"details\": {");
          _builder.newLine();
          _builder.append("        ");
          _builder.append("\"type\": \"uint256\",");
          _builder.newLine();
          _builder.append("        ");
          _builder.append("\"internalType\": \"uint256\"");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          return _builder.toString();
        case "string":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("\"name\": \"output\",");
          _builder_1.newLine();
          _builder_1.append("\"schema\": {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"type\": \"string\"");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          return _builder_1.toString();
        case "boolean":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("\"name\": \"output\",");
          _builder_2.newLine();
          _builder_2.append("\"schema\": {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("\"type\": \"boolean\"");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          return _builder_2.toString();
        case "address":
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("\"name\": \"output\",");
          _builder_3.newLine();
          _builder_3.append("\"schema\": {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("\"type\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("\"details\": {");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"type\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"internalType\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"indexed\": false");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          return _builder_3.toString();
        case "array":
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("\"name\": \"output\",");
          _builder_4.newLine();
          _builder_4.append("\"schema\": {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("\"type\": \"array\",");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("\"details\": {");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("\"type\": \"uint256[]\",");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("\"internalType\": \"uint256[]\"");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          return _builder_4.toString();
        default:
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("\"name\": \"output\",");
          _builder_5.newLine();
          _builder_5.append("\"schema\": {");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("\"type\": \"integer\",");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("\"details\": {");
          _builder_5.newLine();
          _builder_5.append("        ");
          _builder_5.append("\"type\": \"uint256\",");
          _builder_5.newLine();
          _builder_5.append("        ");
          _builder_5.append("\"internalType\": \"uint256\"");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("}");
          _builder_5.newLine();
          _builder_5.append("}");
          _builder_5.newLine();
          return _builder_5.toString();
      }
    } else {
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("\"name\": \"output\",");
      _builder_5.newLine();
      _builder_5.append("\"schema\": {");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("\"type\": \"integer\",");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("\"details\": {");
      _builder_5.newLine();
      _builder_5.append("        ");
      _builder_5.append("\"type\": \"uint256\",");
      _builder_5.newLine();
      _builder_5.append("        ");
      _builder_5.append("\"internalType\": \"uint256\"");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      return _builder_5.toString();
    }
  }
  
  public String getParamTypeForSolidity(final String dataType) {
    if (dataType != null) {
      switch (dataType) {
        case "integer":
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("\"schema\": {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("\"type\": \"integer\",");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("\"details\": {");
          _builder.newLine();
          _builder.append("        ");
          _builder.append("\"type\": \"uint256\",");
          _builder.newLine();
          _builder.append("        ");
          _builder.append("\"internalType\": \"uint256\"");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          return _builder.toString();
        case "string":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("\"schema\": {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"type\": \"string\",");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("\"details\": {");
          _builder_1.newLine();
          _builder_1.append("        ");
          _builder_1.append("\"type\": \"string memory\",");
          _builder_1.newLine();
          _builder_1.append("        ");
          _builder_1.append("\"internalType\": \"string memory\"");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          return _builder_1.toString();
        case "boolean":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("\"schema\": {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("\"type\": \"boolean\"");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          return _builder_2.toString();
        case "address":
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("\"schema\": {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("\"type\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("\"details\": {");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"type\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"internalType\": \"address\",");
          _builder_3.newLine();
          _builder_3.append("        ");
          _builder_3.append("\"indexed\": false");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          return _builder_3.toString();
        case "array":
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("\"schema\": {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("\"type\": \"array\",");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("\"details\": {");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("\"type\": \"uint256[]\",");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("\"internalType\": \"uint256[]\"");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          return _builder_4.toString();
        default:
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("\"schema\": {");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("\"type\": \"integer\",");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("\"details\": {");
          _builder_5.newLine();
          _builder_5.append("        ");
          _builder_5.append("\"type\": \"uint256\",");
          _builder_5.newLine();
          _builder_5.append("        ");
          _builder_5.append("\"internalType\": \"uint256\"");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("}");
          _builder_5.newLine();
          _builder_5.append("}");
          _builder_5.newLine();
          return _builder_5.toString();
      }
    } else {
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("\"schema\": {");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("\"type\": \"integer\",");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("\"details\": {");
      _builder_5.newLine();
      _builder_5.append("        ");
      _builder_5.append("\"type\": \"uint256\",");
      _builder_5.newLine();
      _builder_5.append("        ");
      _builder_5.append("\"internalType\": \"uint256\"");
      _builder_5.newLine();
      _builder_5.append("    ");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      return _builder_5.toString();
    }
  }
  
  public String capitalizeFirstLetter(final String str) {
    String _upperCase = str.substring(0, 1).toUpperCase();
    String _substring = str.substring(1);
    return (_upperCase + _substring);
  }
}
