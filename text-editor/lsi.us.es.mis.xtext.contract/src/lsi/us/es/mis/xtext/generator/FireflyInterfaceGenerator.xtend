/*
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.contract.Contract

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FireflyInterfaceGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var contract = resource.contents.head as Contract
		
		fsa.generateFile(contract.name + ".json", toFireflyInterface(contract))
	}
	
def String toFireflyInterface(Contract contract) {
    val name = contract.name
    val version = contract.version
    
    var methods = ""
    for (attribute : contract.attributes) {
        val attributeName = attribute.name
        val attributeType = attribute.type.toString()
        
        // Set Method
        if (attribute.modifiable) {
        	
	        val param = '''
		        {
		            "name": "$paramName",
		            "type": "$paramType",
		            "schema": {
		                "type": "$paramSchemaType",
		                "details": {
		                    "type": "$paramSchemaDetailsType",
		                    "internalType": "$paramSchemaDetailsInternalType",
		                    "indexed": $paramSchemaDetailsIndexed
		                }
		            }
		        }
		      '''
		      
		     val methodCode = '''
			        {
			            "name": "$methodName",
			            "description": "$methodDescription",
			            "params": [
			                «param»
			            ],
			            "returns": {
			                "type": "$returnsType",
			                "schema": {
			                    "type": "$returnsSchemaType",
			                    "details": {
			                        "type": "$returnsSchemaDetailsType",
			                        "internalType": "$returnsSchemaDetailsInternalType",
			                        "indexed": $returnsSchemaDetailsIndexed
			                    }
			                }
			            }
			        }
			        '''
			 methods += methodCode + ",\n"
        }
        
        // Get Method
        val methodCode = '''
        {
            "name": "get«capitalizeFirstLetter(attributeName)»",
            "description": "",
            "params": [],
            "returns": {
                «getReturnTypeForSolidity(attributeType)»
            },
            "details": {
                "stateMutability": "viewable"
            }
            
        }
        '''
        
        methods += methodCode + ",\n"
    }
    
    val interfaceCode = '''
    {
        "name": «name»,
        "version":  «version»,
        "methods": [
            «methods»
        ],
        "events": []
    }
    '''
    
    return interfaceCode
}

	def String getSolidityDataType(String dataType) {
	    switch (dataType) {
	        case "integer":
	            return "uint256"
	        case "string":
	            return "string"
	        case "boolean":
	            return "bool"
	        case "address":
	            return "address"
	        case "array":
	            return "uint256[]"
	        default:
	            return "uint256"
	    }
	}
	
	def String getSolidityDataTypeForFunction(String dataType) {
		switch (dataType) {
	        case "integer":
	            return "uint256"
	        case "string":
	            return "string memory"
	        case "boolean":
	            return "bool"
	        case "address":
	            return "address"
	        case "array":
	            return "uint256[]"
	        default:
	            return "uint256"
	    }
	}
	
	def String getReturnTypeForSolidity(String dataType) {
		switch (dataType) {
	        case "integer":
	            return '''
                "name": "output",
                "schema": {
                    "type": "integer",
                    "details": {
                        "type": "uint256",
                        "internalType": "uint256",
                        "indexed": false
                    }
                }
	            '''
	        case "string":
	            return '''
                "name": "output",
                "schema": {
                    "type": "string"
                }
	            '''
	        case "boolean":
	            return '''
                "name": "output",
                "schema": {
                    "type": "boolean"
                }
	            '''
	        case "address":
	            return '''
                "name": "output",
                "schema": {
                    "type": "address",
                    "details": {
                        "type": "address",
                        "internalType": "address",
                        "indexed": false
                    }
                }
            	'''
	        case "array":
	            return '''
                "name": "output",
                "schema": {
                    "type": "array",
                    "details": {
                        "type": "uint256[]",
                        "internalType": "uint256[]"
                    }
                }
	            '''
	        default:
	            return '''
                "name": "output",
                "schema": {
                    "type": "integer",
                    "details": {
                        "type": "uint256",
                        "internalType": "uint256"
                    }
                }
	            '''
	    }
	}

	def String capitalizeFirstLetter(String str) {
	    return str.substring(0, 1).toUpperCase() + str.substring(1)
	}
	
	
}
