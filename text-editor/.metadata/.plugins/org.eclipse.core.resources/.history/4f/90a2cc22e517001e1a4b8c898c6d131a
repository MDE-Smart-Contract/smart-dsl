/*
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.contract.Contract

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SolidityGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('example.sol', toSolidity(resource.contents.head as Contract))
	}
	
	def toSolidity(Contract contract) {
	    var code = new StringBuilder
	    val contractName = contract.name
	    code.append("// SPDX-License-Identifier: MIT\n")
	    code.append("pragma solidity ^0.8.0;\n\n")
	    code.append("contract " + contractName + " {\n")

	    for (attribute : contract.attributes) {
	        val attributeName = attribute.name
	        val attributeType = getSolidityDataType(attribute.type.toString)
	        
	        // Agrega la declaración del atributo
	        code.append("\t"+ attributeType + " " + attributeName +";\n")
	    }
	    code.append("\n")
    
	    // Agrega el constructor
	    code.append("\tconstructor(")
	    for (attribute : contract.attributes) {
	        val attributeName = attribute.name
	        val attributeType = getSolidityDataType(attribute.type.toString)
	        
	        code.append(attributeType + " _" + attributeName)
	        if (attribute != contract.attributes.last) {
	            code.append(", ")
	        }
	    }
	    
	    code.append(") {\n")
	    for (attribute : contract.attributes) {
	        val attributeName = attribute.name
	        code.append("\t\t" + attributeName + " = _" + attributeName +";\n")
	    }
	    code.append("\t}\n\n")
    
    	// Genera las funciones de set y get
	    for (attribute : contract.attributes) {
	        val attributeName = attribute.name
	        val attributeType = getSolidityDataType(attribute.type.toString)
	        
	        code.append("\tfunction set" + capitalizeFirstLetter(attributeName)+ "("+ attributeType + " _value) public {\n")
	        code.append("\t\t"+attributeName+" = _value;\n")
	        code.append("\t}\n\n")
	        
	        code.append("\tfunction get" + capitalizeFirstLetter(attributeName)+ "() public view returns (" +attributeType +") {\n")
	        code.append("\t\treturn " + attributeName + ";\n")
	        code.append("\t}\n\n")
	    }
	    
	    code.append("}")
	    return code.toString
	}

	def String getSolidityDataType(String dataType) {
	    switch (dataType) {
	        case "integer":
	            return "uint256"
	        case "string":
	            return "string"
	        case "boolean":
	            return "bool"
	        case "address":
	            return "address"
	        case "array":
	            return "uint256[]"
	        default:
	            return "uint256"
	    }
	}

	def String capitalizeFirstLetter(String str) {
	    return str.substring(0, 1).toUpperCase() + str.substring(1)
	}
	
	
}
