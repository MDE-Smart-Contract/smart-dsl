/*
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.contract.Contract

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SolidityGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	
	def toSolidity(Contract contract) {
	    var code = new StringBuilder
	    var attributesCode = new StringBuilder
	    var constructorCode = new StringBuilder
	    // ...
	    for (attribute : contract.attributes) {
		    val attributeName = attribute.name
		    val attributeType = attribute.type.toString
		    
		    // Agrega el atributo al constructor para inicializarlo
		    constructorCode.append("\t\t$attributeName = ${getDefaultInitialValue(attributeType)};\n")
		    
		    if (attribute.modifiable) {
		        // Genera la función de set
		        attributesCode.append("\tfunction set$attributeName($attributeType _value) public {\n")
		        attributesCode.append("\t\t$attributeName = _value;\n")
		        attributesCode.append("\t}\n\n")
		        
		        // Genera la función de get
		        attributesCode.append("\tfunction get$attributeName() public view returns ($attributeType) {\n")
		        attributesCode.append("\t\treturn $attributeName;\n")
		        attributesCode.append("\t}\n\n")
		    }
		    
		    // Genera la declaración del atributo
		    code.append("\t$attributeType $attributeName;\n")
		}
		
		code.append("contract ${contract.name} {\n")
		code.append(attributesCode)
		code.append("\tconstructor() {\n")
		code.append(constructorCode)
		code.append("\t}\n")
		code.append("}")
		
		return code.toString
	    
	}
	
	def String getDefaultInitialValue(String dataType) {
	    switch (dataType) {
	        case "integer":
	            return "0"
	        case "string":
	            return "\"\""
	        case "boolean":
	            return "false"
	        case "address":
	            return "address(0)"
	        case "array":
	            return "[]"
	        default:
	            return "0"
	    }
	}
	
	def String getSolidityDataType(String dataType) {
	    switch (dataType) {
	        case "integer":
	            return "int"
	        case "string":
	            return "string"
	        case "boolean":
	            return "bool"
	        case "address":
	            return "address"
	        case "array":
	            return "uint256[]"
	        default:
	            return "uint256"
	    }
	}
	
}
